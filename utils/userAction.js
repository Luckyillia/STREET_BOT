const { Markup } = require('telegraf');
const fs = require('fs').promises;

async function start(ctx) {
  try {
    const chatId = ctx.chat.id; // –ü–æ–ª—É—á–∞–µ–º ID —á–∞—Ç–∞
    const isGroupChat = ctx.chat.type === 'group' || ctx.chat.type === 'supergroup';

    let admins = [];
    if (isGroupChat) {
      const adminsData = await ctx.telegram.getChatAdministrators(chatId);
      admins = adminsData.map(admin => admin.user);
    }

    // Chat data structure with required fields
    const chatData = {
      chatName: ctx.chat.title,
      isAdmin: isGroupChat ? admins.some(admin => admin.id === ctx.from.id) : false,
      isGroup: isGroupChat,
      admins: admins,
      bannedUsers: [],
      streets: [] // Initially, no streets data
    };

    // Load existing chat data from file
    let jsonData = {};
    try {
      const fileData = await fs.readFile('data.json', 'utf8');
      jsonData = JSON.parse(fileData);
    } catch (error) {
      console.log('–§–∞–π–ª data.json –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∏–ª–∏ –ø–æ–≤—Ä–µ–∂–¥–µ–Ω. –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π.');
    }

    // Check if chat already exists in data
    if (!jsonData[chatId]) {
      jsonData[chatId] = chatData;
    }

    // Save updated chat data
    await fs.writeFile('data.json', JSON.stringify(jsonData, null, 2), 'utf8');

    // Welcome message
    await ctx.reply(
      'üöß –ü—Ä–∏–≤–µ—Ç! –Ø —Ç–≤–æ–π –ø–æ–º–æ—â–Ω–∏–∫ –ø–æ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–µ—Ä–µ–∫—Ä—ã—Ç—ã—Ö —É–ª–∏—Ü–∞—Ö. üõë\n\n' +
      '–° –º–æ–µ–π –ø–æ–º–æ—â—å—é —Ç—ã –º–æ–∂–µ—à—å:\n' +
      '- –£–∑–Ω–∞—Ç—å, –∫–∞–∫–∏–µ —É–ª–∏—Ü—ã –ø–µ—Ä–µ–∫—Ä—ã—Ç—ã –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å.\n' +
      '- –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π —É–ª–∏—Ü—ã.\n' +
      '- –°–æ–æ–±—â–∏—Ç—å –æ –ø–µ—Ä–µ–∫—Ä—ã—Ç–∏–∏ –∏–ª–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ —É–ª–∏—Ü—ã.\n\n' +
      '–ß—Ç–æ —Ç—ã —Ö–æ—á–µ—à—å —Å–¥–µ–ª–∞—Ç—å? –í—ã–±–µ—Ä–∏ –æ–ø—Ü–∏—é –Ω–∏–∂–µ: ',
      Markup.keyboard([[ 'üìã –°–ø–∏—Å–æ–∫ –ø–µ—Ä–µ–∫—Ä—ã—Ç—ã—Ö —É–ª–∏—Ü', 'üö¶ –ò–∑–º–µ–Ω–∏—Ç—å —Å—Ç–∞—Ç—É—Å —É–ª–∏—Ü—ã']]).resize()
    );
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö —á–∞—Ç–∞:', error);
    await ctx.reply('‚ùó –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö.');
  }
}

// List streets function with chat data
async function listStreet(ctx) {
  try {
    const chatId = ctx.chat.id;
    const data = await fs.readFile('data.json', 'utf8');
    let chats = JSON.parse(data);

    const chatData = chats[chatId];
    if (!chatData || chatData.streets.length === 0) {
      return await ctx.reply(
        '‚úÖ –í –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± —É–ª–∏—Ü–∞—Ö.',
        Markup.keyboard([['üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é']]).resize()
      );
    }

    const streetsList = chatData.streets.map((street, index) => {
      const statusEmoji = street.status === 'closed' ? '‚ùå' : '‚úÖ';
      const noteText = street.note ? ` (üìù ${street.note})` : '';
      return `${index + 1}. ${statusEmoji} ${street.name}${noteText}`;
    }).join('\n');

    await ctx.reply(
      `üöß –°—Ç–∞—Ç—É—Å —É–ª–∏—Ü:\n\n${streetsList}`,
      Markup.keyboard([['üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é']]).resize()
    );
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞:', error);
    await ctx.reply('‚ùó –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
  }
}

// Back to main menu
async function backToMain(ctx, userState) {
  await ctx.reply(
    'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é. –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:',
    Markup.keyboard([[ 'üìã –°–ø–∏—Å–æ–∫ –ø–µ—Ä–µ–∫—Ä—ã—Ç—ã—Ö —É–ª–∏—Ü', 'üö¶ –ò–∑–º–µ–Ω–∏—Ç—å —Å—Ç–∞—Ç—É—Å —É–ª–∏—Ü—ã']]).resize()
  );
  userState.delete(ctx.from.id);
}

// Check street status state
async function checkState(ctx, userState) {
  await ctx.reply(
    '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ\n\n' +
    'üîç –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —É–ª–∏—Ü—ã –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏:',
    Markup.keyboard([['üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é']]).resize()
  );
  userState.set(ctx.from.id, 'checking_street');
}

// Edit street status state
async function editState(ctx, userState) {
  await ctx.reply(
    '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ\n\n' +
    '‚úç –í–≤–µ–¥–∏—Ç–µ —É–ª–∏—Ü—É, –Ω–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å –∏ (–ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏) –ø—Ä–∏–º–µ—á–∞–Ω–∏–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n\n' +
    'üìå –ü—Ä–∏–º–µ—Ä: *–ö—Ä–µ–º–ª–µ–≤—Å–∫–∞—è-–∑–∞–∫—Ä—ã—Ç–∞(—Ä–µ–º–æ–Ω—Ç)* –∏–ª–∏ *–ø—Ä–æ—Å–ø. –ü–æ–±–µ–¥—ã-–æ—Ç–∫—Ä—ã—Ç–∞*',
    Markup.keyboard([['üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é']]).resize()
  );
  userState.set(ctx.from.id, 'changing_status');
}

// Handle dislikes and banning users
async function dislike(ctx) {
  try {
    const data = await fs.readFile('data.json', 'utf8');
    let chats = JSON.parse(data);
    let chatData = chats[ctx.chat.id];

    if (!chatData) return ctx.reply('–û—à–∏–±–∫–∞: –ß–∞—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ.');

    let fromUser = ctx.from;
    let targetUser = ctx.message.reply_to_message?.from;

    if (!targetUser) {
      return ctx.reply('‚ö† –û—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, —á—Ç–æ–±—ã –ø–æ—Å—Ç–∞–≤–∏—Ç—å –¥–∏–∑–ª–∞–π–∫.');
    }

    if (!chatData.dislikes) chatData.dislikes = {};
    if (!chatData.bannedUsers) chatData.bannedUsers = [];

    // Check if user already disliked the target user
    if (chatData.dislikes[targetUser.id]?.includes(fromUser.id)) {
      return ctx.reply('üö´ –í—ã —É–∂–µ —Å—Ç–∞–≤–∏–ª–∏ –¥–∏–∑–ª–∞–π–∫ —ç—Ç–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.');
    }

    // Add dislike
    if (!chatData.dislikes[targetUser.id]) {
      chatData.dislikes[targetUser.id] = [];
    }
    chatData.dislikes[targetUser.id].push(fromUser.id);

    // Ban user if they have 10 dislikes
    if (chatData.dislikes[targetUser.id].length >= 10) {
      if (!chatData.bannedUsers.some(user => user.id === targetUser.id)) {
        chatData.bannedUsers.push({
          id: targetUser.id,
          is_bot: targetUser.is_bot || false,
          first_name: targetUser.first_name || '',
          username: targetUser.username || ''
        });
        ctx.reply(`üö´ ${targetUser.first_name} –±—ã–ª –∑–∞–º—É—á–µ–Ω –∑–∞ 10 –¥–∏–∑–ª–∞–π–∫–æ–≤.`);
      }
    }

    await fs.writeFile('data.json', JSON.stringify(chats, null, 2), 'utf8');
    ctx.reply(`üëé ${fromUser.first_name} –ø–æ—Å—Ç–∞–≤–∏–ª –¥–∏–∑–ª–∞–π–∫ ${targetUser.first_name}.`);
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–∏–∑–ª–∞–π–∫–∞:', error);
    ctx.reply('‚ùó –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞.');
  }
}

module.exports = {
  start,
  listStreet,
  editState,
  checkState,
  dislike,
  backToMain
};
