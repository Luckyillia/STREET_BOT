const { Markup } = require('telegraf');
const fs = require('fs');

async function start(ctx) {
  try {
    const chatId = ctx.chat.id; // –ü–æ–ª—É—á–∞–µ–º ID —á–∞—Ç–∞

    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º, —á–∞—Ç —Å –±–æ—Ç–æ–º –∏–ª–∏ –≥—Ä—É–ø–ø–∞
    const isGroupChat = ctx.chat.type === 'group' || ctx.chat.type === 'supergroup';
    const isPrivateChat = ctx.chat.type === 'private';

    // –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —ç—Ç–æ –≥—Ä—É–ø–ø–∞
    let admins = [];
    if (isGroupChat) {
      const adminsData = await ctx.telegram.getChatAdministrators(chatId);
      admins = adminsData.map(admin => {
        return admin.user;
      });
    }
    // –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —á–∞—Ç–µ
    const chatData = {
      chatId: chatId,
      chatName: ctx.chat.title,
      isAdmin: isGroupChat ? admins.includes(ctx.from.id) : false, // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –≤—ã–∑—ã–≤–∞—é—â–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–æ–º (—Ç–æ–ª—å–∫–æ –¥–ª—è –≥—Ä—É–ø–ø)
      isGroup: isGroupChat,
      admins: admins,
      bannedUsers: [], // –ü–æ–∫–∞ –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫
      streets: [] // –ü–æ–∫–∞ –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫ —É–ª–∏—Ü
    };

    let jsonData = [];
    try {
      const fileData = fs.readFileSync('data.json', 'utf8');
      jsonData = JSON.parse(fileData); // –ü–∞—Ä—Å–∏–º JSON
    } catch (error) {
      console.log('–§–∞–π–ª data.json –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∏–ª–∏ –ø–æ–≤—Ä–µ–∂–¥–µ–Ω. –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π.');
    }

    const existingChatIndex = jsonData.findIndex(chat => chat.chatId === chatId);

    if (existingChatIndex === -1) {
      jsonData.push(chatData);
    }

    // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –º–∞—Å—Å–∏–≤ –æ–±—Ä–∞—Ç–Ω–æ –≤ JSON-—Ñ–∞–π–ª
    fs.writeFileSync('data.json', JSON.stringify(jsonData, null, 2), 'utf8');

    console.log('–î–∞–Ω–Ω—ã–µ —á–∞—Ç–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã:', chatData); // –í—ã–≤–æ–¥ –≤ –∫–æ–Ω—Å–æ–ª—å –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    await ctx.reply(
      'üöß –ü—Ä–∏–≤–µ—Ç! –Ø —Ç–≤–æ–π –ø–æ–º–æ—â–Ω–∏–∫ –ø–æ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–µ—Ä–µ–∫—Ä—ã—Ç—ã—Ö —É–ª–∏—Ü–∞—Ö. üõë\n\n' +
      '–° –º–æ–µ–π –ø–æ–º–æ—â—å—é —Ç—ã –º–æ–∂–µ—à—å:\n' +
      '- –£–∑–Ω–∞—Ç—å, –∫–∞–∫–∏–µ —É–ª–∏—Ü—ã –ø–µ—Ä–µ–∫—Ä—ã—Ç—ã –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å.\n' +
      '- –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π —É–ª–∏—Ü—ã.\n' +
      '- –°–æ–æ–±—â–∏—Ç—å –æ –ø–µ—Ä–µ–∫—Ä—ã—Ç–∏–∏ –∏–ª–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ —É–ª–∏—Ü—ã.\n\n' +
      '–ß—Ç–æ —Ç—ã —Ö–æ—á–µ—à—å —Å–¥–µ–ª–∞—Ç—å? –í—ã–±–µ—Ä–∏ –æ–ø—Ü–∏—é –Ω–∏–∂–µ: ',
      Markup.keyboard([['üìç –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —É–ª–∏—Ü—É', 'üìã –°–ø–∏—Å–æ–∫ –ø–µ—Ä–µ–∫—Ä—ã—Ç—ã—Ö —É–ª–∏—Ü', 'üö¶ –ò–∑–º–µ–Ω–∏—Ç—å —Å—Ç–∞—Ç—É—Å —É–ª–∏—Ü—ã']]).resize()
    );
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö —á–∞—Ç–∞:', error);
    await ctx.reply('‚ùó –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö.');
  }
}

async function listStreet(ctx) {
  try {
    const chatId = ctx.chat.id;
    const data = await fs.promises.readFile('data.json', 'utf8');
    let chats = JSON.parse(data);

    const chatData = chats.find(chat => chat.chatId === chatId);

    if (!chatData || chatData.streets.length === 0) {
      return await ctx.reply(
        '‚úÖ –í –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± —É–ª–∏—Ü–∞—Ö.',
        Markup.keyboard([['üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é']]).resize()
      );
    }

    const streetsList = chatData.streets.map((street, index) => {
      const statusEmoji = street.status === 'closed' ? '‚ùå' : '‚úÖ';
      const noteText = street.note ? ` (üìù ${street.note})` : '';
      return `${index + 1}. ${statusEmoji} ${street.name}${noteText}`;
    }).join('\n');

    await ctx.reply(
      `üöß –°—Ç–∞—Ç—É—Å —É–ª–∏—Ü:\n\n${streetsList}`,
      Markup.keyboard([['üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é']]).resize()
    );
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞:', error);
    await ctx.reply('‚ùó –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
  }
}


async function backToMain(ctx, userState){
  await ctx.reply(
    'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é. –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:',
    Markup.keyboard([['üìç –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —É–ª–∏—Ü—É', 'üìã –°–ø–∏—Å–æ–∫ –ø–µ—Ä–µ–∫—Ä—ã—Ç—ã—Ö —É–ª–∏—Ü', 'üö¶ –ò–∑–º–µ–Ω–∏—Ç—å —Å—Ç–∞—Ç—É—Å —É–ª–∏—Ü—ã']]).resize()
  );

  userState.delete(ctx.from.id);
}


async function checkState(ctx,userState){
  await ctx.reply(
    '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–≤–µ—Ç—å—Ç–µ –º–Ω–µ –Ω–∞ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ\n\n' +
    'üîç –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —É–ª–∏—Ü—ã –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏:',
    Markup.keyboard([['üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é']]).resize()
  );

  userState.set(ctx.from.id, 'checking_street');
}

async function editState(ctx, userState){
  await ctx.reply(
    '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–≤–µ—Ç—å—Ç–µ –º–Ω–µ –Ω–∞ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ\n\n' +
    '‚úç –í–≤–µ–¥–∏—Ç–µ —É–ª–∏—Ü—É, –Ω–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å –∏ (–ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏) –ø—Ä–∏–º–µ—á–∞–Ω–∏–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n\n' +
    'üìå –ü—Ä–∏–º–µ—Ä: *–ö—Ä–µ–º–ª–µ–≤—Å–∫–∞—è-–∑–∞–∫—Ä—ã—Ç–∞(—Ä–µ–º–æ–Ω—Ç)* –∏–ª–∏ *–ø—Ä–æ—Å–ø. –ü–æ–±–µ–¥—ã-–æ—Ç–∫—Ä—ã—Ç–∞*',
    Markup.keyboard([['üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é']]).resize()
  );

  userState.set(ctx.from.id, 'changing_status');
}

module.exports = {
  start,
  listStreet,
  editState,
  checkState,
  backToMain
};