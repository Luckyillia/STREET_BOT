const { Markup } = require('telegraf');
const fs = require('fs');

async function handleMessage(ctx, userState, adminState) {
  try {
    const chatId = ctx.chat.id;
    const userId = ctx.from.id;

    // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ
    const data = await fs.promises.readFile('data.json', 'utf8');
    const chats = JSON.parse(data);

    // –ò—â–µ–º —Ç–µ–∫—É—â–∏–π —á–∞—Ç
    const chatData = chats.find(chat => chat.chatId === chatId);
    if (!chatData) return next();

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–º—É—á–µ–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    if (chatData.bannedUsers.some(user => user.id === userId)) {
      const allowedCommands = [
        'üìã –°–ø–∏—Å–æ–∫ –ø–µ—Ä–µ–∫—Ä—ã—Ç—ã—Ö —É–ª–∏—Ü',
        'üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é'
      ];

      if (!allowedCommands.some(cmd => ctx.message.text.startsWith(cmd))) {
        return ctx.reply('üö´ –í—ã –∑–∞–º—É—á–µ–Ω—ã –∏ –Ω–µ –º–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è.');
      }
    }
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –Ω–∞ –º—É—Ç:', error);
  }
  try {
    const userId = ctx.from.id;
    const input = ctx.message.text.trim();
    const state = userState.get(userId);
    const admState = adminState.get(userId);

    // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —á–∞—Ç–∞
    const chatId = ctx.chat.id;
    const data = await fs.promises.readFile('data.json', 'utf8');
    let chats = JSON.parse(data);
    let chatData = chats.find(chat => chat.chatId === chatId);

    if (!chatData) {
      chatData = {
        chatId: chatId,
        isAdmin: false,
        admins: [],
        bannedUsers: [],
        streets: []
      };
      chats.push(chatData); // –ï—Å–ª–∏ —á–∞—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π
    }

    // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–æ–≤–µ—Ä—è–µ—Ç —É–ª–∏—Ü—É
    if (state === 'checking_street') {
      const street = chatData.streets.find(s => s.name.toLowerCase() === input.toLowerCase());

      if (!street) {
        return await ctx.reply(`‚ö† –£–ª–∏—Ü–∞ *${input}* –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –±–∞–∑–µ.`);
      }

      const statusEmoji = street.status === 'closed' ? '‚ùå' : '‚úÖ';
      const statusText = street.status === 'closed' ? '–∑–∞–∫—Ä—ã—Ç–∞' : '–æ—Ç–∫—Ä—ã—Ç–∞';
      const dateClosedText = street.status === 'closed' && street.dateClosed ? `\nüìÖ –ó–∞–∫—Ä—ã—Ç–∞: ${street.dateClosed}` : '';

      await ctx.reply(`üöß –°—Ç–∞—Ç—É—Å —É–ª–∏—Ü—ã *${street.name}*:\n\n${statusEmoji} –£–ª–∏—Ü–∞ *${statusText}*${dateClosedText}`);
      userState.delete(userId); // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
      return await ctx.reply(
        'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é. –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:',
        Markup.keyboard([['üìç –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —É–ª–∏—Ü—É', 'üìã –°–ø–∏—Å–æ–∫ –ø–µ—Ä–µ–∫—Ä—ã—Ç—ã—Ö —É–ª–∏—Ü', 'üö¶ –ò–∑–º–µ–Ω–∏—Ç—å —Å—Ç–∞—Ç—É—Å —É–ª–∏—Ü—ã']]).resize()
      );
    }

    // –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ —É–ª–∏—Ü—ã
    if (state === 'changing_status') {
      const match = input.match(/(.+)-(–∑–∞–∫—Ä—ã—Ç–∞|–æ—Ç–∫—Ä—ã—Ç–∞)/i);

      if (!match) {
        return await ctx.reply('‚ö† –û—à–∏–±–∫–∞! –í–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ: *—É–ª. –õ–µ–Ω–∏–Ω–∞-–∑–∞–∫—Ä—ã—Ç–∞*');
      }

      const streetName = match[1].trim();
      const newStatus = match[2].toLowerCase() === '–∑–∞–∫—Ä—ã—Ç–∞' ? 'closed' : 'open';

      let streetFound = false;
      chatData.streets = chatData.streets.map((street) => {
        if (street.name.toLowerCase() === streetName.toLowerCase()) {
          street.status = newStatus;
          if (newStatus === 'closed') {
            street.dateClosed = new Date().toLocaleString();
          } else {
            street.dateClosed = null;
          }
          streetFound = true;
        }
        return street;
      });

      if (!streetFound) {
        return await ctx.reply('‚ùå –£–ª–∏—Ü–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –Ω–∞–ø–∏—Å–∞–Ω–∏—è.');
      }

      await fs.promises.writeFile('data.json', JSON.stringify(chats, null, 2), 'utf8');
      await ctx.reply(`‚úÖ –°—Ç–∞—Ç—É—Å —É–ª–∏—Ü—ã *${streetName}* –∏–∑–º–µ–Ω—ë–Ω –Ω–∞ *${newStatus === 'closed' ? '–∑–∞–∫—Ä—ã—Ç–∞' : '–æ—Ç–∫—Ä—ã—Ç–∞'}*!`);
      userState.delete(userId);
      return await ctx.reply(
        'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é. –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:',
        Markup.keyboard([['üìç –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —É–ª–∏—Ü—É', 'üìã –°–ø–∏—Å–æ–∫ –ø–µ—Ä–µ–∫—Ä—ã—Ç—ã—Ö —É–ª–∏—Ü', 'üö¶ –ò–∑–º–µ–Ω–∏—Ç—å —Å—Ç–∞—Ç—É—Å —É–ª–∏—Ü—ã']]).resize()
      );
    }

    // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–π —É–ª–∏—Ü—ã
    if (admState === 'adding_street') {
      const streetName = input;

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ —Ç–∞–∫–∞—è —É–ª–∏—Ü–∞
      const existingStreet = chatData.streets.find(s => s.name.toLowerCase() === streetName.toLowerCase());
      if (existingStreet) {
        return await ctx.reply('‚ö† –£–ª–∏—Ü–∞ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ –±–∞–∑–µ.');
      }

      chatData.streets.push({ name: streetName, status: 'open' });
      await fs.promises.writeFile('data.json', JSON.stringify(chats, null, 2), 'utf8');

      await ctx.reply(`‚úÖ –£–ª–∏—Ü–∞ *${streetName}* —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –±–∞–∑—É!`);
      adminState.delete(userId); // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –≤ –º–µ–Ω—é
      return await ctx.reply(
        'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é. –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:',
        Markup.keyboard([['üìç –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —É–ª–∏—Ü—É', 'üìã –°–ø–∏—Å–æ–∫ –ø–µ—Ä–µ–∫—Ä—ã—Ç—ã—Ö —É–ª–∏—Ü', 'üö¶ –ò–∑–º–µ–Ω–∏—Ç—å —Å—Ç–∞—Ç—É—Å —É–ª–∏—Ü—ã']]).resize()
      );
    }

    // –£–¥–∞–ª–µ–Ω–∏–µ —É–ª–∏—Ü—ã
    if (admState === 'removing_street') {
      const streetName = input;

      const streetIndex = chatData.streets.findIndex(s => s.name.toLowerCase() === streetName.toLowerCase());
      if (streetIndex === -1) {
        return await ctx.reply('‚ö† –£–ª–∏—Ü–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –±–∞–∑–µ.');
      }

      chatData.streets.splice(streetIndex, 1);
      await fs.promises.writeFile('data.json', JSON.stringify(chats, null, 2), 'utf8');

      await ctx.reply(`‚úÖ –£–ª–∏—Ü–∞ *${streetName}* —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞ –∏–∑ –±–∞–∑—ã!`);
      adminState.delete(userId); // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –≤ –º–µ–Ω—é
      return await ctx.reply(
        'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é. –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:',
        Markup.keyboard([['üìç –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —É–ª–∏—Ü—É', 'üìã –°–ø–∏—Å–æ–∫ –ø–µ—Ä–µ–∫—Ä—ã—Ç—ã—Ö —É–ª–∏—Ü', 'üö¶ –ò–∑–º–µ–Ω–∏—Ç—å —Å—Ç–∞—Ç—É—Å —É–ª–∏—Ü—ã']]).resize()
      );
    }
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è:', error);
    await ctx.reply('‚ùó –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
  }
}

module.exports = {
  handleMessage
};