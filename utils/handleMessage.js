const { Markup } = require('telegraf');
const fs = require('fs').promises;

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –∏–∑ —Ñ–∞–π–ª–∞
async function loadData() {
  try {
    const data = await fs.readFile('data.json', 'utf8');
    return JSON.parse(data);
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö:', error);
    return {};
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –≤ —Ñ–∞–π–ª
async function saveData(data) {
  try {
    await fs.writeFile('data.json', JSON.stringify(data, null, 2), 'utf8');
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö:', error);
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∏—Å–∫–∞ —á–∞—Ç–∞ –ø–æ ID
function findChat(data, chatId) {
  return data[chatId];
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏, –∑–∞–º—É—á–µ–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
function isUserBanned(chatData, userId) {
  return chatData.bannedUsers.some(user => user.id === userId);
}

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
async function handleMessage(ctx, userState, adminState) {
  const chatId = ctx.chat.id.toString();  // –ß–∞—Ç ID –∫–∞–∫ —Å—Ç—Ä–æ–∫–∞
  const userId = ctx.from.id;
  const input = ctx.message.text.trim();
  const state = userState.get(userId);
  const admState = adminState.get(userId);

  try {
    // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ
    const data = await loadData();
    let chatData = findChat(data, chatId);

    // –ï—Å–ª–∏ —á–∞—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π
    if (!chatData) {
      chatData = {
        chatName: ctx.chat.title || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —á–∞—Ç',
        isAdmin: false,
        isGroup: ctx.chat.type === 'group',
        admins: [],
        bannedUsers: [],
        streets: []
      };
      data[chatId] = chatData;
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –º—É—Ç
    if (isUserBanned(chatData, userId)) {
      const allowedCommands = ['üìã –°–ø–∏—Å–æ–∫ –ø–µ—Ä–µ–∫—Ä—ã—Ç—ã—Ö —É–ª–∏—Ü', 'üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é'];
      if (!allowedCommands.some(cmd => input.startsWith(cmd))) {
        return ctx.reply('üö´ –í—ã –∑–∞–º—É—á–µ–Ω—ã –∏ –Ω–µ –º–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è.');
      }
    }

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏–π
    if (state === 'checking_street') {
      await handleCheckStreet(ctx, chatData, input, userState, userId);
    } else if (state === 'changing_status') {
      await handleChangeStatus(ctx, chatData, input, userState, userId);
    } else if (admState === 'adding_street') {
      await handleAddStreet(ctx, chatData, input, adminState, userId);
    } else if (admState === 'removing_street') {
      await handleRemoveStreet(ctx, chatData, input, adminState, userId);
    }

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ—Å–ª–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π
    await saveData(data);
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è:', error);
    await ctx.reply('‚ùó –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ —É–ª–∏—Ü—ã
async function handleCheckStreet(ctx, chatData, input, userState, userId) {
  const street = chatData.streets.find(s => s.name.toLowerCase() === input.toLowerCase());

  if (!street) {
    return await ctx.reply(`‚ö† –£–ª–∏—Ü–∞ *${input}* –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –±–∞–∑–µ.`);
  }

  const statusEmoji = street.status === 'closed' ? '‚ùå' : '‚úÖ';
  const statusText = street.status === 'closed' ? '–∑–∞–∫—Ä—ã—Ç–∞' : '–æ—Ç–∫—Ä—ã—Ç–∞';
  const dateClosedText = street.status === 'closed' && street.dateClosed ? `\nüìÖ –ó–∞–∫—Ä—ã—Ç–∞: ${street.dateClosed}` : '';
  const noteText = street.note ? `\nüìù –ü—Ä–∏–º–µ—á–∞–Ω–∏–µ: ${street.note}` : '';

  await ctx.reply(`üöß –°—Ç–∞—Ç—É—Å —É–ª–∏—Ü—ã *${street.name}*:\n\n${statusEmoji} –£–ª–∏—Ü–∞ *${statusText}*${dateClosedText}${noteText}`);
  userState.delete(userId);
  await ctx.reply(
    'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é. –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:',
    Markup.keyboard([[ 'üìã –°–ø–∏—Å–æ–∫ –ø–µ—Ä–µ–∫—Ä—ã—Ç—ã—Ö —É–ª–∏—Ü', 'üö¶ –ò–∑–º–µ–Ω–∏—Ç—å —Å—Ç–∞—Ç—É—Å —É–ª–∏—Ü—ã']]).resize()
  );
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ —É–ª–∏—Ü—ã
async function handleChangeStatus(ctx, chatData, input, userState, userId) {
  const match = input.match(/(.+)-(–∑–∞–∫—Ä—ã—Ç–∞|–æ—Ç–∫—Ä—ã—Ç–∞)(?:\((.+)\))?/i);

  if (!match) {
    return await ctx.reply('‚ö† –û—à–∏–±–∫–∞! –í–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ: *—É–ª. –õ–µ–Ω–∏–Ω–∞-–∑–∞–∫—Ä—ã—Ç–∞* –∏–ª–∏ *—É–ª. –õ–µ–Ω–∏–Ω–∞-–∑–∞–∫—Ä—ã—Ç–∞(—Ä–µ–º–æ–Ω—Ç)*');
  }

  const streetName = match[1].trim();
  const newStatus = match[2].toLowerCase() === '–∑–∞–∫—Ä—ã—Ç–∞' ? 'closed' : 'open';
  let note = match[3] ? match[3].trim() : null;

  // –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –ø—Ä–∏–º–µ—á–∞–Ω–∏—è –¥–æ 12 —Å–∏–º–≤–æ–ª–æ–≤
  if (note && note.length > 12) {
    return await ctx.reply('‚ö† –ü—Ä–∏–º–µ—á–∞–Ω–∏–µ –Ω–µ –¥–æ–ª–∂–Ω–æ –ø—Ä–µ–≤—ã—à–∞—Ç—å 12 —Å–∏–º–≤–æ–ª–æ–≤.');
  }

  let streetFound = false;
  chatData.streets.forEach((street) => {
    if (street.name.toLowerCase() === streetName.toLowerCase()) {
      street.status = newStatus;
      street.note = note;
      street.dateClosed = newStatus === 'closed' ? new Date().toLocaleString('ru-RU') : null;
      streetFound = true;
    }
  });

  if (!streetFound) {
    return await ctx.reply('‚ùå –£–ª–∏—Ü–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –Ω–∞–ø–∏—Å–∞–Ω–∏—è.');
  }

  await ctx.reply(`‚úÖ –°—Ç–∞—Ç—É—Å —É–ª–∏—Ü—ã *${streetName}* –∏–∑–º–µ–Ω—ë–Ω –Ω–∞ *${newStatus === 'closed' ? '–∑–∞–∫—Ä—ã—Ç–∞' : '–æ—Ç–∫—Ä—ã—Ç–∞'}*!` + (note ? `\nüìå –ü—Ä–∏–º–µ—á–∞–Ω–∏–µ: ${note}` : ''));
  userState.delete(userId);

  await ctx.reply(
    'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é. –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:',
    Markup.keyboard([[ 'üìã –°–ø–∏—Å–æ–∫ –ø–µ—Ä–µ–∫—Ä—ã—Ç—ã—Ö —É–ª–∏—Ü', 'üö¶ –ò–∑–º–µ–Ω–∏—Ç—å —Å—Ç–∞—Ç—É—Å —É–ª–∏—Ü—ã']]).resize()
  );
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —É–ª–∏—Ü—ã
async function handleAddStreet(ctx, chatData, input, adminState, userId) {
  const existingStreet = chatData.streets.find(s => s.name.toLowerCase() === input.toLowerCase());
  if (existingStreet) {
    return await ctx.reply('‚ö† –£–ª–∏—Ü–∞ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ –±–∞–∑–µ.');
  }

  chatData.streets.push({ name: input, status: 'open' });
  await ctx.reply(`‚úÖ –£–ª–∏—Ü–∞ *${input}* —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –±–∞–∑—É!`);
  adminState.delete(userId);
  await ctx.reply(
    'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é. –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:',
    Markup.keyboard([['üìã –°–ø–∏—Å–æ–∫ –ø–µ—Ä–µ–∫—Ä—ã—Ç—ã—Ö —É–ª–∏—Ü', 'üö¶ –ò–∑–º–µ–Ω–∏—Ç—å —Å—Ç–∞—Ç—É—Å —É–ª–∏—Ü—ã']]).resize()
  );
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —É–ª–∏—Ü—ã
async function handleRemoveStreet(ctx, chatData, input, adminState, userId) {
  const streetIndex = chatData.streets.findIndex(s => s.name.toLowerCase() === input.toLowerCase());
  if (streetIndex === -1) {
    return await ctx.reply('‚ö† –£–ª–∏—Ü–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –±–∞–∑–µ.');
  }

  chatData.streets.splice(streetIndex, 1);
  await ctx.reply(`‚úÖ –£–ª–∏—Ü–∞ *${input}* —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞ –∏–∑ –±–∞–∑—ã!`);
  adminState.delete(userId);
  await ctx.reply(
    'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é. –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:',
    Markup.keyboard([[ 'üìã –°–ø–∏—Å–æ–∫ –ø–µ—Ä–µ–∫—Ä—ã—Ç—ã—Ö —É–ª–∏—Ü', 'üö¶ –ò–∑–º–µ–Ω–∏—Ç—å —Å—Ç–∞—Ç—É—Å —É–ª–∏—Ü—ã']]).resize()
  );
}

module.exports = {
  handleMessage
};
