const { Markup } = require('telegraf');
const fs = require('fs');
const func = require('./func');

async function adminAction(ctx, adminState) {
  if (!(await func.isAdmin(ctx))) {
    return ctx.reply('üö´ –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏.');
  }

  adminState.set(ctx.from.id, 'admin_menu');
  await ctx.reply(
    'üîß –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å. –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:',
    Markup.keyboard([['‚ûï –î–æ–±–∞–≤–∏—Ç—å —É–ª–∏—Ü—É', 'üóë –£–¥–∞–ª–∏—Ç—å —É–ª–∏—Ü—É'], ['üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é']]).resize()
  );
}

async function addStreet(ctx, adminState) {
  if (!(await func.isAdmin(ctx))) return;

  adminState.set(ctx.from.id, 'adding_street');
  await ctx.reply(
    '‚úç –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —É–ª–∏—Ü—ã, –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å:',
    Markup.keyboard([['üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é']]).resize()
  );
}

async function deleteStreet(ctx, adminState) {
  if (!(await func.isAdmin(ctx))) return;

  adminState.set(ctx.from.id, 'removing_street');
  await ctx.reply(
    '‚úç –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —É–ª–∏—Ü—ã, –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å:',
    Markup.keyboard([['üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é']]).resize()
  );
}

async function muteUser(ctx) {
  try {
    const data = await fs.promises.readFile('data.json', 'utf8');
    const chats = JSON.parse(data);
    const chatData = chats.find(chat => chat.chatId === ctx.chat.id);

    if (!chatData || !(await func.isAdmin(ctx))) {
      return ctx.reply('üö´ –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.');
    }

    let targetUser = ctx.message.reply_to_message?.from;
    console.log(targetUser);
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    if (chatData.admins.some(admin => admin.id === targetUser.id)) {
      return ctx.reply('‚ö† –í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –∑–∞–º—É—Ç–∏—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.');
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –≤ –º—É—Ç–µ –ª–∏ —É–∂–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    const isBanned = chatData.bannedUsers.some(user => user.id === targetUser.id);
    if (isBanned) {
      return ctx.reply('üö´ –≠—Ç–æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –≤ –º—É—Ç–µ.');
    }

    // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –º—É—Ç
    chatData.bannedUsers.push(targetUser);
    await fs.promises.writeFile('data.json', JSON.stringify(chats, null, 2), 'utf8');
    return ctx.reply(`‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${targetUser.first_name} –±—ã–ª –∑–∞–º—É—á–µ–Ω.`);
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –º—É—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', error);
    ctx.reply('‚ùó –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞.');
  }
}

async function unmuteUser(ctx) {
  try {
    const data = await fs.promises.readFile('data.json', 'utf8');
    const chats = JSON.parse(data);
    const chatData = chats.find(chat => chat.chatId === ctx.chat.id);

    if (!chatData || !(await func.isAdmin(ctx))) {
      return ctx.reply('üö´ –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤.');
    }

    let targetUser = ctx.message.reply_to_message?.from;


    if (chatData.bannedUsers.some(user => user.id === targetUser.id)) {
      chatData.bannedUsers = chatData.bannedUsers.filter(user => user.id !== targetUser.id);
      await fs.promises.writeFile('data.json', JSON.stringify(chats, null, 2), 'utf8');
      return ctx.reply(`üîä –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${targetUser.first_name} –±—ã–ª —Ä–∞–∑–º—É—á–µ–Ω.`);
    } else {
      return ctx.reply('‚ö† –≠—Ç–æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –≤ –º—É—Ç–µ.');
    }
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–∑–º—É—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', error);
    ctx.reply('‚ùó –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞.');
  }
}

async function addAdmin(ctx) {
  try {
    const data = await fs.promises.readFile('data.json', 'utf8');
    const chats = JSON.parse(data);
    const chatData = chats.find(chat => chat.chatId === ctx.chat.id);

    if (!chatData || !(await func.isAdmin(ctx))) {
      return ctx.reply('üö´ –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤.');
    }

    let newAdmin = ctx.message.reply_to_message?.from;
    console.log(newAdmin);
    if (chatData.admins.some(admin => admin.id === newAdmin.id)) {
      return ctx.reply('‚ö† –≠—Ç–æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä.');
    }

    chatData.admins.push(newAdmin);
    await fs.promises.writeFile('data.json', JSON.stringify(chats, null, 2), 'utf8');
    return ctx.reply(`‚úÖ ${newAdmin.first_name} —Ç–µ–ø–µ—Ä—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä.`);
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:', error);
    ctx.reply('‚ùó –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞.');
  }
}

async function removeAdmin(ctx) {
  try {
    const data = await fs.promises.readFile('data.json', 'utf8');
    const chats = JSON.parse(data);
    const chatData = chats.find(chat => chat.chatId === ctx.chat.id);

    if (!chatData || !(await func.isAdmin(ctx))) {
      return ctx.reply('üö´ –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤.');
    }

    let removeAdmin = ctx.message.reply_to_message?.from;

    chatData.admins = chatData.admins.filter(admin => admin.id !== removeAdmin.id);
    await fs.promises.writeFile('data.json', JSON.stringify(chats, null, 2), 'utf8');
    return ctx.reply(`‚úÖ ${removeAdmin.first_name} –±–æ–ª—å—à–µ –Ω–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä.`);
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:', error);
    ctx.reply('‚ùó –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞.');
  }
}

async function showAdmins(ctx) {
  try {
    const data = await fs.promises.readFile('data.json', 'utf8');
    const chats = JSON.parse(data);
    const chatData = chats.find(chat => chat.chatId === ctx.chat.id);

    if (!chatData || !(await func.isAdmin(ctx))) {
      return ctx.reply('üö´ –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.');
    }

    if (chatData.admins.length === 0) {
      return ctx.reply('‚ö† –í —ç—Ç–æ–º —á–∞—Ç–µ –Ω–µ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤.');
    }

    let adminList = '–°–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤:\n';
    chatData.admins.forEach(admin => {
      adminList += `‚Ä¢ ${admin.first_name} (ID: ${admin.id})\n`;
    });

    return ctx.reply(adminList);
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–≤–æ–¥–µ —Å–ø–∏—Å–∫–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤:', error);
    ctx.reply('‚ùó –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞.');
  }
}

async function showBannedUsers(ctx) {
  try {
    const data = await fs.promises.readFile('data.json', 'utf8');
    const chats = JSON.parse(data);
    const chatData = chats.find(chat => chat.chatId === ctx.chat.id);

    if (!chatData || !(await func.isAdmin(ctx))) {
      return ctx.reply('üö´ –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.');
    }

    if (chatData.bannedUsers.length === 0) {
      return ctx.reply('‚ö† –í —ç—Ç–æ–º —á–∞—Ç–µ –Ω–µ—Ç –∑–∞–º—É—á–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.');
    }

    let bannedList = '–°–ø–∏—Å–æ–∫ –∑–∞–º—É—á–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:\n';
    chatData.bannedUsers.forEach(user => {
      bannedList += `‚Ä¢ ${user.first_name} = ${user.username} (ID: ${user.id})\n`;
    });

    return ctx.reply(bannedList);
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–≤–æ–¥–µ —Å–ø–∏—Å–∫–∞ –∑–∞–º—É—á–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:', error);
    ctx.reply('‚ùó –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞.');
  }
}


module.exports = {
  adminAction,
  addStreet,
  deleteStreet,
  muteUser,
  unmuteUser,
  addAdmin,
  removeAdmin,
  showAdmins,
  showBannedUsers
};
