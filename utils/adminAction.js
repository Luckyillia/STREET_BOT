const { Markup } = require('telegraf');
const fs = require('fs');
const func = require('./func');

async function adminAction(ctx, adminState) {
  if (!(await func.isAdmin(ctx, ctx.chat.id))) {
    return ctx.reply('üö´ –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏.');
  }

  adminState.set(ctx.from.id, 'admin_menu');
  await ctx.reply(
    'üîß –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å. –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:',
    Markup.keyboard([['‚ûï –î–æ–±–∞–≤–∏—Ç—å —É–ª–∏—Ü—É', 'üóë –£–¥–∞–ª–∏—Ç—å —É–ª–∏—Ü—É'], ['üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é']]).resize()
  );
}

async function addStreet(ctx, adminState) {
  if (!(await func.isAdmin(ctx, ctx.chat.id))) return;

  adminState.set(ctx.from.id, 'adding_street');
  await ctx.reply(
    '‚úç –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —É–ª–∏—Ü—ã, –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å:',
    Markup.keyboard([['üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é']]).resize()
  );
}

async function deleteStreet(ctx, adminState) {
  if (!(await func.isAdmin(ctx, ctx.chat.id))) return;

  adminState.set(ctx.from.id, 'removing_street');
  await ctx.reply(
    '‚úç –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —É–ª–∏—Ü—ã, –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å:',
    Markup.keyboard([['üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é']]).resize()
  );
}

async function muteUser(ctx) {
  try {
    const data = await fs.promises.readFile('data.json', 'utf8');
    const chats = JSON.parse(data);
    const chatData = chats[ctx.chat.id];

    if (!chatData || !(await func.isAdmin(ctx, ctx.chat.id))) {
      return ctx.reply('üö´ –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.');
    }

    const targetUser = ctx.message.reply_to_message?.from;
    if (chatData.admins.some(admin => admin.id === targetUser.id)) {
      return ctx.reply('‚ö† –í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –∑–∞–º—É—Ç–∏—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.');
    }

    if (chatData.bannedUsers.includes(targetUser.id)) {
      return ctx.reply('üö´ –≠—Ç–æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –≤ –º—É—Ç–µ.');
    }

    chatData.bannedUsers.push(targetUser.id);
    await fs.promises.writeFile('data.json', JSON.stringify(chats, null, 2), 'utf8');
    return ctx.reply(`‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${targetUser.first_name} –±—ã–ª –∑–∞–º—É—á–µ–Ω.`);
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –º—É—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', error);
    ctx.reply('‚ùó –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞.');
  }
}

async function unmuteUser(ctx) {
  try {
    const data = await fs.promises.readFile('data.json', 'utf8');
    const chats = JSON.parse(data);
    const chatData = chats[ctx.chat.id];

    if (!chatData || !(await func.isAdmin(ctx, ctx.chat.id))) {
      return ctx.reply('üö´ –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤.');
    }

    const targetUser = ctx.message.reply_to_message?.from;

    if (chatData.bannedUsers.includes(targetUser.id)) {
      chatData.bannedUsers = chatData.bannedUsers.filter(id => id !== targetUser.id);
      await fs.promises.writeFile('data.json', JSON.stringify(chats, null, 2), 'utf8');
      return ctx.reply(`üîä –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${targetUser.first_name} –±—ã–ª —Ä–∞–∑–º—É—á–µ–Ω.`);
    } 
      return ctx.reply('‚ö† –≠—Ç–æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –≤ –º—É—Ç–µ.');
    
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–∑–º—É—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', error);
    ctx.reply('‚ùó –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞.');
  }
}

async function showBannedUsers(ctx) {
  try {
    const data = await fs.promises.readFile('data.json', 'utf8');
    const chats = JSON.parse(data);
    const chatData = chats[ctx.chat.id];

    if (!chatData || !(await func.isAdmin(ctx, ctx.chat.id))) {
      return ctx.reply('üö´ –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.');
    }

    if (chatData.bannedUsers.length === 0) {
      return ctx.reply('‚ö† –í —ç—Ç–æ–º —á–∞—Ç–µ –Ω–µ—Ç –∑–∞–º—É—á–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.');
    }

    let bannedList = '–°–ø–∏—Å–æ–∫ –∑–∞–º—É—á–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:\n';
    chatData.bannedUsers.forEach(userId => {
      bannedList += `‚Ä¢ ID: ${userId}\n`;
    });

    return ctx.reply(bannedList);
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–≤–æ–¥–µ —Å–ø–∏—Å–∫–∞ –∑–∞–º—É—á–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:', error);
    ctx.reply('‚ùó –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞.');
  }
}

async function addStreetFromChat(ctx){
  const text = ctx.message.text.trim();

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–º–∞–Ω–¥—ã /add-street chat-id street-name
  const regex = /^\/addStreet (-?\d+) (.+)$/;
  const match = text.match(regex);

  if (match) {
    const chatId = match[1];
    const streetName = match[2];

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –≤ —ç—Ç–æ–º —á–∞—Ç–µ
    const isAdminInChat = await func.isAdmin(ctx, chatId);
    if (!isAdminInChat) {
      return ctx.reply('üö´ –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –≤ —ç—Ç–æ–º —á–∞—Ç–µ.');
    }

    try {
      // –ß—Ç–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ —Ñ–∞–π–ª–∞
      const data = await fs.promises.readFile('data.json', 'utf8');
      const chats = JSON.parse(data);

      if (!chats[chatId]) {
        return ctx.reply('‚ö† –ß–∞—Ç —Å —Ç–∞–∫–∏–º ID –Ω–µ –Ω–∞–π–¥–µ–Ω.');
      }

      const chat = chats[chatId];
      if (!Array.isArray(chat.streets)) {
        chat.streets = [];
      }

      // –î–æ–±–∞–≤–ª—è–µ–º —É–ª–∏—Ü—É –≤ —Å–ø–∏—Å–æ–∫
      chat.streets.push({
        name: streetName,
        status: 'open',
        dateClosed: null,
        note: null
      });

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –æ–±—Ä–∞—Ç–Ω–æ –≤ —Ñ–∞–π–ª
      await fs.promises.writeFile('data.json', JSON.stringify(chats, null, 2), 'utf8');
      return ctx.reply(`‚úÖ –£–ª–∏—Ü–∞ "${streetName}" –±—ã–ª–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ —á–∞—Ç ${chat.chatName}.`);
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —É–ª–∏—Ü—ã:', error);
      ctx.reply('‚ùó –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —É–ª–∏—Ü—ã.');
    }
  } else {
    ctx.reply('‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /addStreet chat-id street-name');
  }
}


async function removeStreetFromChat(ctx) {
  const text = ctx.message.text.trim();

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–º–∞–Ω–¥—ã /removeStreet chat-id street-name
  const regex = /^\/removeStreet (-?\d+) (.+)$/;
  const match = text.match(regex);

  if (match) {
    const chatId = match[1]; // ID —á–∞—Ç–∞ (–º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–º)
    const streetName = match[2]; // –ù–∞–∑–≤–∞–Ω–∏–µ —É–ª–∏—Ü—ã

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –≤ —ç—Ç–æ–º —á–∞—Ç–µ
    const isAdminInChat = await func.isAdmin(ctx, chatId);
    if (!isAdminInChat) {
      return ctx.reply('üö´ –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –≤ —ç—Ç–æ–º —á–∞—Ç–µ.');
    }

    try {
      // –ß—Ç–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ —Ñ–∞–π–ª–∞
      const data = await fs.promises.readFile('data.json', 'utf8');
      const chats = JSON.parse(data);

      if (!chats[chatId]) {
        return ctx.reply('‚ö† –ß–∞—Ç —Å —Ç–∞–∫–∏–º ID –Ω–µ –Ω–∞–π–¥–µ–Ω.');
      }

      const chat = chats[chatId];
      if (!Array.isArray(chat.streets)) {
        return ctx.reply('‚ö† –í —ç—Ç–æ–º —á–∞—Ç–µ –Ω–µ—Ç —Å–ø–∏—Å–∫–∞ —É–ª–∏—Ü.');
      }

      // –ò—â–µ–º —É–ª–∏—Ü—É –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
      const streetIndex = chat.streets.findIndex(street => street.name === streetName);
      if (streetIndex === -1) {
        return ctx.reply(`‚ö† –£–ª–∏—Ü–∞ "${streetName}" –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ —á–∞—Ç–µ.`);
      }

      // –£–¥–∞–ª—è–µ–º —É–ª–∏—Ü—É –∏–∑ —Å–ø–∏—Å–∫–∞
      chat.streets.splice(streetIndex, 1);

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –æ–±—Ä–∞—Ç–Ω–æ –≤ —Ñ–∞–π–ª
      await fs.promises.writeFile('data.json', JSON.stringify(chats, null, 2), 'utf8');
      return ctx.reply(`‚úÖ –£–ª–∏—Ü–∞ "${streetName}" –±—ã–ª–∞ —É–¥–∞–ª–µ–Ω–∞ –∏–∑ —á–∞—Ç–∞ ${chat.chatName}.`);
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —É–ª–∏—Ü—ã:', error);
      ctx.reply('‚ùó –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —É–ª–∏—Ü—ã.');
    }
  } else {
    ctx.reply('‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /removeStreet chat-id street-name');
  }
}


module.exports = {
  adminAction,
  addStreet,
  deleteStreet,
  muteUser,
  unmuteUser,
  showBannedUsers,
  addStreetFromChat,
  removeStreetFromChat
};
